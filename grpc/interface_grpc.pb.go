// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: grpc/interface.proto

package handin_04

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecieveClient is the client API for Recieve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecieveClient interface {
	Recieve(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Reply(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Reply, error)
}

type recieveClient struct {
	cc grpc.ClientConnInterface
}

func NewRecieveClient(cc grpc.ClientConnInterface) RecieveClient {
	return &recieveClient{cc}
}

func (c *recieveClient) Recieve(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/handin_04.recieve/recieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recieveClient) Reply(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/handin_04.recieve/reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecieveServer is the server API for Recieve service.
// All implementations must embed UnimplementedRecieveServer
// for forward compatibility
type RecieveServer interface {
	Recieve(context.Context, *Request) (*Reply, error)
	Reply(context.Context, *Empty) (*Reply, error)
	mustEmbedUnimplementedRecieveServer()
}

// UnimplementedRecieveServer must be embedded to have forward compatible implementations.
type UnimplementedRecieveServer struct {
}

func (UnimplementedRecieveServer) Recieve(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recieve not implemented")
}
func (UnimplementedRecieveServer) Reply(context.Context, *Empty) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reply not implemented")
}
func (UnimplementedRecieveServer) mustEmbedUnimplementedRecieveServer() {}

// UnsafeRecieveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecieveServer will
// result in compilation errors.
type UnsafeRecieveServer interface {
	mustEmbedUnimplementedRecieveServer()
}

func RegisterRecieveServer(s grpc.ServiceRegistrar, srv RecieveServer) {
	s.RegisterService(&Recieve_ServiceDesc, srv)
}

func _Recieve_Recieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecieveServer).Recieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handin_04.recieve/recieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecieveServer).Recieve(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recieve_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecieveServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handin_04.recieve/reply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecieveServer).Reply(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Recieve_ServiceDesc is the grpc.ServiceDesc for Recieve service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recieve_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handin_04.recieve",
	HandlerType: (*RecieveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "recieve",
			Handler:    _Recieve_Recieve_Handler,
		},
		{
			MethodName: "reply",
			Handler:    _Recieve_Reply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/interface.proto",
}
